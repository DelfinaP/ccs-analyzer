*********************************************************************
*  abp.csp   (written by Rance Cleaveland (in CCS), translated to 
*             CSP by Steve Sims)
*
*  This file contains a version of the Alternating Bit Protocol.
*
*  The specification of the protocol is represented by the process
*  "Spec", and there are two implementations, "ABP-lossy", which
*  uses a lossy medium "Mlossy", and "ABP-safe, which uses a
*  reliable medum "Msafe".
*
*  "ABP-lossy" is correct in the sense that it is observationally
*  equivalent to "Spec", whereas "ABP-safe" is not. 
*
*********************************************************************

*********************************************************************
* The definition of the specification 
*********************************************************************

proc Spec = send -> receive -> Spec

*********************************************************************
* The definition of the sender
*********************************************************************

proc Sender = S0

proc S0 = send -> S0'

proc S0' = s0 -> ((rack0 -> S1 []  * correct ack, ready for next send
                   rack1 -> S0'    * wrong ack, resend
                  ) |~|  
                  S0'              * timeout and resend
                 )

proc S1 = send -> S1'

proc S1' = s1 -> ((rack1 -> S0 []  * correct ack, ready for next send
              rack0 -> S1'         * wrong ack, resend
             ) |~|
             S1'                   * timeout and resend
            )

*********************************************************************
* The definition of the receiver
*********************************************************************

proc Receiver = R0
  
proc R0 = ((r0 -> receive -> sack0 -> R1 [] * correct sequence num,
                                            * receive, send ack
            r1 -> sack1 -> R0               * wrong sequence num, 
                                            * ack last msg
           ) |~| 
           sack1 -> R0                      * timeout and resend last ack
          )

proc R1 = ((r1 -> receive -> sack1 -> R0 [] * correct sequence num,
                                            * receive, send ack
            r0 -> sack0 -> R1               * wrong sequence num, 
                                            * ack last msg
           ) |~| 
           sack0 -> R1                      * timeout and resend last ack
          )

*********************************************************************
* The definition of the lossy medium "Mlossy"
*********************************************************************

proc Mlossy = 
  s0 -> (r0 -> Mlossy []
         Mlossy
        ) [] 
  s1 -> (r1 -> Mlossy []
         Mlossy
        ) []
  sack0 -> (rack0 -> Mlossy []
            Mlossy
           ) [] 
  sack1 -> (rack1 -> Mlossy []
            Mlossy
           )

proc ABP-lossy = 
  (
    Sender [| {s0,s1,rack0,rack1} |]
    Mlossy [| {r0,r1,sack0,sack1} |]
    Receiver
  ) \ Internals

*********************************************************************
* The definition of the reliable medium "Msafe"
*********************************************************************

proc Msafe = 
  s0 -> r0 -> Msafe []
  s1 -> r1 -> Msafe []
  sack0 -> rack0 -> Msafe []
  sack1 -> rack1 -> Msafe

proc ABP-safe = 
  (
    Sender [|{s0,s1,rack0,rack1}|]
    Msafe [|{r0,r1,sack0,sack1}|]
    Receiver
  ) \ Internals

set Internals = {s0,s1,r0,r1,sack0,sack1,rack0,rack1}

*********************************************************************
*  Specification
*********************************************************************

proc Spec2 = send -> Spec2'

proc Spec2' = send -> Spec2'' [] receive -> Spec2

proc Spec2'' = receive -> Spec2' 

*********************************************************************
*  Implementation
*********************************************************************

proc Two-link-netw =
   (ABP-lossy[[receive <- inode]] [| {inode} |]  
    ABP-lossy[[send <- inode]]) \ {inode}






