
process Spec [ send,receive] :=
 send;receive;(Spec [ send,receive]) endproc 

process Sender [ send,s0,s1,rack0,rack1] :=
 S0 [ send,s0,s1,rack0,rack1] endproc 

process S0 [ send,s0,s1,rack0,rack1] :=
 send;(S0' [ send,s0,s1,rack0,rack1]) endproc 

process S0' [ send,s0,s1,rack0,rack1] :=
 s0;
  (rack0;(S1 [ send,s0,s1,rack0,rack1]) []
    rack1;(S0' [ send,s0,s1,rack0,rack1]) []
     i;(S0' [ send,s0,s1,rack0,rack1])) endproc 

process S1 [ send,s0,s1,rack0,rack1] :=
 send;(S1' [ send,s0,s1,rack0,rack1]) endproc 

process S1' [ send,s0,s1,rack0,rack1] :=
 s1;
  (rack1;(S0 [ send,s0,s1,rack0,rack1]) []
    rack0;(S1' [ send,s0,s1,rack0,rack1]) []
     i;(S1' [ send,s0,s1,rack0,rack1])) endproc 

process Receiver [ receive,r0,r1,sack0,sack1] :=
 R0 [ receive,r0,r1,sack0,sack1] endproc 

process R0 [ receive,r0,r1,sack0,sack1] :=
 r0;receive;sack0;(R1 [ receive,r0,r1,sack0,sack1]) []
  r1;sack1;(R0 [ receive,r0,r1,sack0,sack1]) []
   i;sack1;(R0 [ receive,r0,r1,sack0,sack1]) endproc 

process R1 [ receive,r0,r1,sack0,sack1] :=
 r1;receive;sack1;(R0 [ receive,r0,r1,sack0,sack1]) []
  r0;sack0;(R1 [ receive,r0,r1,sack0,sack1]) []
   i;sack0;(R1 [ receive,r0,r1,sack0,sack1]) endproc 

process Mlossy [ s0,s1,r0,r1,sack0,sack1,rack0,rack1] :=
 s0;
  (r0;(Mlossy [ s0,s1,r0,r1,sack0,sack1,rack0,rack1]) []
    (Mlossy [ s0,s1,r0,r1,sack0,sack1,rack0,rack1])) []
  s1;
   (r1;(Mlossy [ s0,s1,r0,r1,sack0,sack1,rack0,rack1]) []
     (Mlossy [ s0,s1,r0,r1,sack0,sack1,rack0,rack1])) []
   sack0;
    (rack0;(Mlossy [ s0,s1,r0,r1,sack0,sack1,rack0,rack1]) []
      (Mlossy [ s0,s1,r0,r1,sack0,sack1,rack0,rack1])) []
    sack1;
     (rack1;(Mlossy [ s0,s1,r0,r1,sack0,sack1,rack0,rack1]) []
       (Mlossy [ s0,s1,r0,r1,sack0,sack1,rack0,rack1])) endproc 

process ABP-lossy [ send,receive] :=
 hide s0,s1,rack0,rack1,r0,r1,sack0,sack1 in
  (Sender [ send,s0,s1,rack0,rack1] |[s0,s1,rack0,rack1]|
    Mlossy [ s0,s1,r0,r1,sack0,sack1,rack0,rack1]
      |[r0,r1,sack0,sack1]|
     Receiver [ receive,r0,r1,sack0,sack1]) endproc 

process Msafe [ s0,s1,r0,r1,sack0,sack1,rack0,rack1] :=
 s0;r0;(Msafe [ s0,s1,r0,r1,sack0,sack1,rack0,rack1]) []
  s1;r1;(Msafe [ s0,s1,r0,r1,sack0,sack1,rack0,rack1]) []
   sack0;rack0;(Msafe [ s0,s1,r0,r1,sack0,sack1,rack0,rack1]) []
    sack1;rack1;(Msafe [ s0,s1,r0,r1,sack0,sack1,rack0,rack1]) endproc
 

process ABP-safe [ send,receive] :=
 hide s0,s1,rack0,rack1,r0,r1,sack0,sack1 in
  (Sender [ send,s0,s1,rack0,rack1] |[s0,s1,rack0,rack1]|
    Msafe [ s0,s1,r0,r1,sack0,sack1,rack0,rack1] |[r0,r1,sack0,sack1]|
     Receiver [ receive,r0,r1,sack0,sack1]) endproc 

process Spec2 [ send,receive] := send;(Spec2' [ send,receive]) endproc
 

process Spec2' [ send,receive] :=
 send;(Spec2'' [ send,receive]) []
  receive;(Spec2 [ send,receive]) endproc 

process Spec2'' [ send,receive] :=
 receive;(Spec2' [ send,receive]) endproc 

process Two-link-netw [ send,receive] :=
 hide inode in
  (ABP-lossy [ send,inode] |[inode]|
    ABP-lossy [ inode,receive]) endproc 

process Spec3 [ send,receive] := send;(Spec3' [ send,receive]) endproc
 

process Spec3' [ send,receive] :=
 send;(Spec3'' [ send,receive]) []
  receive;(Spec3 [ send,receive]) endproc 

process Spec3'' [ send,receive] :=
 send;(Spec3''' [ send,receive]) []
  receive;(Spec3' [ send,receive]) endproc 

process Spec3''' [ send,receive] :=
 receive;(Spec3'' [ send,receive]) endproc 

process Three-link-netw [ send,receive] :=
 hide inode1,inode2 in
  (ABP-lossy [ send,inode1] |[inode1]|
    ABP-lossy [ inode1,inode2] |[inode2]|
     ABP-lossy [ inode2,receive]) endproc 

process ABP-lossy-min [ ] :=
 Aut(start=0,
  0: i{1}send{2}1: i{0}send{3}2: i{3,4}3: i{2,5}4: i{5,6,7}5: i{3}
   6: i{8}receive{9}7: i{3,4,8}8: i{6}receive{10}9: i{10,11}
   10: i{9,12}11: i{0,12,13}12: i{10}13: i{1,10,11}) endproc 

process Spec [ send,receive] :=
 send;receive;(Spec [ send,receive]) endproc 

process Sender [ send,s0,s1,rack0,rack1] :=
 S0 [ send,s0,s1,rack0,rack1] endproc 

process S0 [ send,s0,s1,rack0,rack1] :=
 send;(S0' [ send,s0,s1,rack0,rack1]) endproc 

process S0' [ send,s0,s1,rack0,rack1] :=
 s0;
  (rack0;(S1 [ send,s0,s1,rack0,rack1]) []
    rack1;(S0' [ send,s0,s1,rack0,rack1]) []
     i;(S0' [ send,s0,s1,rack0,rack1])) endproc 

process S1 [ send,s0,s1,rack0,rack1] :=
 send;(S1' [ send,s0,s1,rack0,rack1]) endproc 

process S1' [ send,s0,s1,rack0,rack1] :=
 s1;
  (rack1;(S0 [ send,s0,s1,rack0,rack1]) []
    rack0;(S1' [ send,s0,s1,rack0,rack1]) []
     i;(S1' [ send,s0,s1,rack0,rack1])) endproc 

process Receiver [ receive,r0,r1,sack0,sack1] :=
 R0 [ receive,r0,r1,sack0,sack1] endproc 

process R0 [ receive,r0,r1,sack0,sack1] :=
 r0;receive;sack0;(R1 [ receive,r0,r1,sack0,sack1]) []
  r1;sack1;(R0 [ receive,r0,r1,sack0,sack1]) []
   i;sack1;(R0 [ receive,r0,r1,sack0,sack1]) endproc 

process R1 [ receive,r0,r1,sack0,sack1] :=
 r1;receive;sack1;(R0 [ receive,r0,r1,sack0,sack1]) []
  r0;sack0;(R1 [ receive,r0,r1,sack0,sack1]) []
   i;sack0;(R1 [ receive,r0,r1,sack0,sack1]) endproc 

process Mlossy [ s0,s1,r0,r1,sack0,sack1,rack0,rack1] :=
 s0;
  (r0;(Mlossy [ s0,s1,r0,r1,sack0,sack1,rack0,rack1]) []
    (Mlossy [ s0,s1,r0,r1,sack0,sack1,rack0,rack1])) []
  s1;
   (r1;(Mlossy [ s0,s1,r0,r1,sack0,sack1,rack0,rack1]) []
     (Mlossy [ s0,s1,r0,r1,sack0,sack1,rack0,rack1])) []
   sack0;
    (rack0;(Mlossy [ s0,s1,r0,r1,sack0,sack1,rack0,rack1]) []
      (Mlossy [ s0,s1,r0,r1,sack0,sack1,rack0,rack1])) []
    sack1;
     (rack1;(Mlossy [ s0,s1,r0,r1,sack0,sack1,rack0,rack1]) []
       (Mlossy [ s0,s1,r0,r1,sack0,sack1,rack0,rack1])) endproc 

process ABP-lossy [ send,receive] :=
 hide s0,s1,rack0,rack1,r0,r1,sack0,sack1 in
  (Sender [ send,s0,s1,rack0,rack1] |[s0,s1,rack0,rack1]|
    Mlossy [ s0,s1,r0,r1,sack0,sack1,rack0,rack1]
      |[r0,r1,sack0,sack1]|
     Receiver [ receive,r0,r1,sack0,sack1]) endproc 

process Msafe [ s0,s1,r0,r1,sack0,sack1,rack0,rack1] :=
 s0;r0;(Msafe [ s0,s1,r0,r1,sack0,sack1,rack0,rack1]) []
  s1;r1;(Msafe [ s0,s1,r0,r1,sack0,sack1,rack0,rack1]) []
   sack0;rack0;(Msafe [ s0,s1,r0,r1,sack0,sack1,rack0,rack1]) []
    sack1;rack1;(Msafe [ s0,s1,r0,r1,sack0,sack1,rack0,rack1]) endproc
 

process ABP-safe [ send,receive] :=
 hide s0,s1,rack0,rack1,r0,r1,sack0,sack1 in
  (Sender [ send,s0,s1,rack0,rack1] |[s0,s1,rack0,rack1]|
    Msafe [ s0,s1,r0,r1,sack0,sack1,rack0,rack1] |[r0,r1,sack0,sack1]|
     Receiver [ receive,r0,r1,sack0,sack1]) endproc 

process Spec2 [ send,receive] := send;(Spec2' [ send,receive]) endproc
 

process Spec2' [ send,receive] :=
 send;(Spec2'' [ send,receive]) []
  receive;(Spec2 [ send,receive]) endproc 

process Spec2'' [ send,receive] :=
 receive;(Spec2' [ send,receive]) endproc 

process Two-link-netw [ send,receive] :=
 hide inode in
  (ABP-lossy [ send,inode] |[inode]|
    ABP-lossy [ inode,receive]) endproc 

process Spec3 [ send,receive] := send;(Spec3' [ send,receive]) endproc
 

process Spec3' [ send,receive] :=
 send;(Spec3'' [ send,receive]) []
  receive;(Spec3 [ send,receive]) endproc 

process Spec3'' [ send,receive] :=
 send;(Spec3''' [ send,receive]) []
  receive;(Spec3' [ send,receive]) endproc 

process Spec3''' [ send,receive] :=
 receive;(Spec3'' [ send,receive]) endproc 

process Three-link-netw [ send,receive] :=
 hide inode1,inode2 in
  (ABP-lossy [ send,inode1] |[inode1]|
    ABP-lossy [ inode1,inode2] |[inode2]|
     ABP-lossy [ inode2,receive]) endproc 

process ABP-lossy-min [ ] :=
 Aut(start=0,
  0: i{1}send{2}1: i{0}send{3}2: i{3,4}3: i{2,5}4: i{5,6,7}5: i{3}
   6: i{8}receive{9}7: i{3,4,8}8: i{6}receive{10}9: i{10,11}
   10: i{9,12}11: i{0,12,13}12: i{10}13: i{1,10,11}) endproc 
