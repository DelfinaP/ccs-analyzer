Pseudocodice

if (esecuzioneDiDebug) {
	String stringPath = <assegno un path di default>
}
else {
	Leggo una stringa inserita dall'utente alla console e la memorizzo in stringPath;
}
eseguire il cd sulla cartella specificata
eliminare tutti quei file con formato diverso da .ccs
Prendiamo la lista di tutti i file nella cartella e memorizziamo i loro nomi nella lista "fileList";

elaboraFile() {
	copiaFileInCartelle();
	elaboraFileOriginali(String dirPath);
	elaboraFileConInvokemethodSostituito(String dirPath);
}

copiaFileInCartelle() {
	crea due cartelle "file_originali" e "file_invokemethod_sostituito" e in esse copiamo i .ccs;
}

/**
  * Per ciascun .ccs calcola la size dei metodi
  */
elaboraFileOriginali(String dirPath) {
	// Nel metodo "getJsonParameter" la stringa "parametri" è il nome dell'array, e "chiave" è la chiave
	String nomeSottocartella = getJsonParameter("parametri", "chiave");

	String filePath;

	cicla sulla fileList {
		filePath = dirPath + nomeSottocartella + fileList.remove();
		elaboraSingoloFileOriginale(filePath);
	}
}

elaboraSingoloFileOriginale(String filePath) {
	terminaleFile = new Terminale();
	Su "terminaleFile" fai la load in cwb di quel file;
	Con Java prendi la riga che inizia per "proc ALL" e in quella riga prendi i nomi dei metodi e aggiungili alla LinkedList "metodiList";
	terminaleFile.getSizeMetodi(metodiList);
}

terminaleFile.getSizeMetodi(metodiList) {
	String nomeMetodo;

	cicla su metodiList {
		nomeMetodo = metodiList.remove();

		this.getSizeSingoloMetodo(nomeMetodo);
	}
}

getSizeSingoloMetodo(String nomeMetodo) {
	esegui il comando CWB per ottenere la size di "nomeMetodo"
	int size = metodo che parsa l'output del comando estraendo la size;
	memorizza le size in un oggetto singleton "sizeMetodi".
}